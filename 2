package input

import (
	"log"
	"regexp"
	"strconv"
)

var pagePatterns = []*regexp.Regexp{
	regexp.MustCompile(`[\d]+[\s]*\:[\s]*([\d]+)[\s]*[\-]{0,2}[\s]*([\d]*)`),       // matches 12: 188-189
	regexp.MustCompile(`[\d]+[\s]*\(.+\)[\s]*\:[\s]*([\d]+)[\-]{0,2}[\s]*([\d]*)`), //matches 12(issue): 188-189
	regexp.MustCompile(`([\d]+)[\s]*[\-]{0,2}[\s]*([\d]*)[pp]{1,2}`),               // matches 12pp, 12p
	regexp.MustCompile(`[Ppg][.]*[\s]*([\d]+)`),                                    // matches Pg. 20, P. 20, P.20, P20
}

func ToInt(ss []string) []int {
	var output []int

	for i, s := range ss {
		o, err := strconv.Atoi(s)
		if err != nil {
			log.Fatal(err)
		}
		output[i] = o
	}
	return output
}

// func ParseRefYear(ref string) []int {
//
// 	refPattern := `(([17|18|19|20]{2})(\d\d{1})[\s]*-?[\s]*(17|18|19|20])?(\d\d){0,1})`
// 	re := regexp.MustCompile(refPattern)
// 	m := re.FindAllStringSubmatch(ref, -1)
// 	fmt.Println(m)
//
// 	var r []string
// 	if len(m) == 1 {
// 		r = m[0]
// 	} else if len(m) > 1 {
// 		re = regexp.MustCompile(`\(` + refPattern + `\)`)
// 		m = re.FindAllStringSubmatch(ref, -1)
//
// 		if len(m) == 1 {
// 			r = m[0]
// 		} else {
// 			return years
// 		}
// 	} else {
// 		return years
// 	}
//
// 	y := ToInt(r)
//
// handle single year matches
// if y[1] == 0 && y[2] == 0 && y[3] != 0 && y[4] != 0 {
//
// 	years.Start = y[2] * 100 + y[3]
// 	years.Verbatim = y[0]
// } else if y[1] != "" && y[2] != "" && y[3] == "" && y[4] == "" {
// 	years.Start = ToInt(y[1]) * 100 + ToInt(y[2])
// 	years.Verbatim = y[0]
// } else if y[1] != "" && y[2] != "" && y[4] != "" {  // handle year ranges
// 	if y[3] == "" {
// 		y[3] = y[1]
// 	}
//
// 	// if difference in year range is less than 0, it's not a year range so return nothing
// 	//   - hopefully people don't do this: 1999-02 but they probably do
// 	if ((ToInt(y[3]) * 100 + ToInt(y[4])) - (ToInt(y[1]) * 100 + ToInt(y[2]))) > 0 {
// 		years.Start = ToInt(y[1]) * 100 + ToInt(y[2])
// 		years.End = ToInt(y[3]) * 100 + ToInt(y[4])
// 		years.Verbatim = y[0]
// 	}
//}
//
// 	return years
// }
//
func parseVolume(ref string) int {
	return 0
}

func ParsePages(ref string) []int {
	var m []string
	for _, p := range pagePatterns {
		m = p.FindStringSubmatch(ref)
		if m != nil {
			pageStart, _ := strconv.Atoi(m[1])
			if len(m) == 1 {
				return []int{pageStart, 0}
			}
			pageEnd, _ := strconv.Atoi(m[2])
			return []int{pageStart, pageEnd}
		}
	}
	return nil
}

func parseRefString(inp *Input) {
	var parsedRef Reference
	pages := ParsePages(ref)
	inp.PageStart = pages[0]
	inp.PageEnd = pages[1]
}
