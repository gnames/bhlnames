// Code generated by counterfeiter. DO NOT EDIT.
package titlematchertest

import (
	"sync"

	"github.com/gnames/bhlnames/internal/ent/title_matcher"
)

type FakeTitleMatcher struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	TitlesBHLStub        func(string) (map[int][]string, error)
	titlesBHLMutex       sync.RWMutex
	titlesBHLArgsForCall []struct {
		arg1 string
	}
	titlesBHLReturns struct {
		result1 map[int][]string
		result2 error
	}
	titlesBHLReturnsOnCall map[int]struct {
		result1 map[int][]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTitleMatcher) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTitleMatcher) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeTitleMatcher) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeTitleMatcher) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTitleMatcher) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTitleMatcher) TitlesBHL(arg1 string) (map[int][]string, error) {
	fake.titlesBHLMutex.Lock()
	ret, specificReturn := fake.titlesBHLReturnsOnCall[len(fake.titlesBHLArgsForCall)]
	fake.titlesBHLArgsForCall = append(fake.titlesBHLArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.TitlesBHLStub
	fakeReturns := fake.titlesBHLReturns
	fake.recordInvocation("TitlesBHL", []interface{}{arg1})
	fake.titlesBHLMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTitleMatcher) TitlesBHLCallCount() int {
	fake.titlesBHLMutex.RLock()
	defer fake.titlesBHLMutex.RUnlock()
	return len(fake.titlesBHLArgsForCall)
}

func (fake *FakeTitleMatcher) TitlesBHLCalls(stub func(string) (map[int][]string, error)) {
	fake.titlesBHLMutex.Lock()
	defer fake.titlesBHLMutex.Unlock()
	fake.TitlesBHLStub = stub
}

func (fake *FakeTitleMatcher) TitlesBHLArgsForCall(i int) string {
	fake.titlesBHLMutex.RLock()
	defer fake.titlesBHLMutex.RUnlock()
	argsForCall := fake.titlesBHLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTitleMatcher) TitlesBHLReturns(result1 map[int][]string, result2 error) {
	fake.titlesBHLMutex.Lock()
	defer fake.titlesBHLMutex.Unlock()
	fake.TitlesBHLStub = nil
	fake.titlesBHLReturns = struct {
		result1 map[int][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeTitleMatcher) TitlesBHLReturnsOnCall(i int, result1 map[int][]string, result2 error) {
	fake.titlesBHLMutex.Lock()
	defer fake.titlesBHLMutex.Unlock()
	fake.TitlesBHLStub = nil
	if fake.titlesBHLReturnsOnCall == nil {
		fake.titlesBHLReturnsOnCall = make(map[int]struct {
			result1 map[int][]string
			result2 error
		})
	}
	fake.titlesBHLReturnsOnCall[i] = struct {
		result1 map[int][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeTitleMatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.titlesBHLMutex.RLock()
	defer fake.titlesBHLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTitleMatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ title_matcher.TitleMatcher = new(FakeTitleMatcher)
